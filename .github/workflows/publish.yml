name: Publish code

on:
  release:
    types:
      - published

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check github.ref starts with 'refs/tags/'
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo Error! github.ref does not start with 'refs/tags'
          echo github.ref: ${{ github.ref }}
          exit 1
      - name: Set version number environment variable
        env:
          github_ref: ${{ github.ref }}
        run: |
          ref="${github_ref:10}"
          echo $ref
          echo "ref=$ref" >> $GITHUB_ENV
      - name: Temporary
        run: |
          ls
      - name: Use .NET Core 3.1 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
          source-url: https://api.nuget.org/v3/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.NUGET_TOKEN}}
      - name: Install dependencies
        run: dotnet restore
      - name: Build solution [Release]
        run: dotnet build --no-restore -c Release -p:Version=$ref
      - name: Pack solution [Release]
        run: dotnet pack --no-restore -c Release -p:Version=$ref -o out
      - name: Upload Nuget packages as workflow artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Nuget packages
          path: |
            out/*
      - name: Publish Nuget packages to Nuget registry
        run: dotnet nuget push "out/*" -k ${{secrets.NUGET_TOKEN}}
      - name: Upload Nuget packages and documentation as release artifacts
        uses: actions/github-script@v5
        with:
          script: |
            console.log('environment', process.versions);
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;

            for (let file of await fs.readdir('out')) {
              console.log('uploading', file);

              await github.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: ${{ github.event.release.id }},
                name: file,
                data: await fs.readFile(`out/${file}`)
              });
            }
